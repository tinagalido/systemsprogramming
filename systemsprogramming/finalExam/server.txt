#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <fcntl.h>
#include <pthread.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/signal.h>
#include <sys/stat.h>

#define REQUEST_NAME "RequestFIFO"
#define RESPONSE_NAME "ResponseFIFO.%d"

#define MAX_LENGTH 100
#define TRUE 1
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

typedef struct 
{
    pid_t pid;
    char message[MAX_LENGTH];
    char messageMode[10];
} Request;

typedef struct 
{
    char outputMessage[MAX_LENGTH];
} Response;

/* Create exit handler for removing request FIFO */
void removeRequestFifo()
{
    int status; 

    status = unlink(REQUEST_NAME);
    if (status == -1)
    {
        printf("Server failed to remove request FIFO.\n");
    }
}

/* Create signal handler for CTRL+C */
void handleInterruptSignal(int)
{
    exit(EXIT_SUCCESS);
}

void* stringModify(void* requestPointer)
{
    int status, responseFifoDescriptor, numWritten;
    Response response;
    char responseFifoName[MAX_LENGTH];
    Request* requestPointerObject = (Request*)requestPointer;
    char responseOutput[MAX_LENGTH];

    Request request = *(Request*)requestPointer;
    printf(
        "Server received request %d for %s message.\n",
        request.pid,
        request.message
    );

    /* Process the response */
    status = pthread_mutex_lock(&mutex);
    if (status != 0)
    {
        printf("Failed to lock mutex.\n");
        exit(EXIT_FAILURE);
    }

    // Process response as per request
    if (strcmp(requestPointerObject->messageMode,"upper") == 0)
    {
        strcpy(responseOutput, 
            toupper(requestPointerObject->message));
        // responseOutput = (unsigned char)toupper((unsigned char)requestPointerObject->message);
        
    } else if (strcmp(requestPointerObject->messageMode, "lower") == 0)
    {
        // responseOutput = (unsigned char)tolower((unsigned char)requestPointerObject->message);
        strcpy(responseOutput, 
            tolower(requestPointerObject->message));
        
    }
    // Put now the updated/modified string
    strcpy(response.outputMessage,responseOutput);
    
    status = pthread_mutex_unlock(&mutex);
    if (status != 0)
    {
        printf("Failed to unlock mutex.\n");
        exit(EXIT_FAILURE);
    }

    /* Calculate the response FIFO name */
    snprintf(responseFifoName, MAX_LENGTH, RESPONSE_NAME, request.pid);

    /* Open the response FIFO */
    responseFifoDescriptor = open(responseFifoName, O_WRONLY);
    if (responseFifoDescriptor == -1)
    {
        printf("Server failed to open response FIFO.\n");
        exit(EXIT_FAILURE);
    }

    /* Write the response */
    numWritten = write(
        responseFifoDescriptor,
        &response,
        sizeof(Response)
    );
    if (numWritten < sizeof(Response))
    {
        printf("Server encountered partial write error.\n");
        exit(EXIT_FAILURE);
    }

    /* Close the response FIFO so that client can delete it */
    status = close(responseFifoDescriptor);
    if (status == -1)
    {
        printf("Server failed to close response FIFO.\n");
        exit(EXIT_FAILURE);
    }

    free(requestPointer);

    pthread_exit(NULL);
}

int main(int argc, char* argv[])
{
    int status, requestFifoDescriptor, dummyDescriptor;
    int numRead;
    pthread_t requestHandlerThread;
    Request* requestHandlerInput;
    Request request;

    /* Register signal handler for CTRL+C */
    if (signal(SIGINT, handleInterruptSignal) == SIG_ERR)
    {
        printf("Failed to register handler.\n");
        exit(EXIT_FAILURE);
    }

    status = mkfifo(REQUEST_NAME, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
    if (status == -1)
    {
        printf("Failed to make FIFO.\n");
        exit(EXIT_FAILURE);
    }

    /* Put the request on the request FIFO */
    requestFifoDescriptor = open(REQUEST_NAME, O_WRONLY);
    if (requestFifoDescriptor == -1)
    {
        printf("Failed to open server.\n");
        exit(EXIT_FAILURE);
    }

    // Prepare request
    dummyDescriptor = open(REQUEST_NAME, O_WRONLY);
    if (dummyDescriptor == -1)
    {
        printf("Server failed to open the dummy descriptor.\n");
        exit(EXIT_FAILURE);
    }

    while (TRUE) 
    {
        // Read next request
        numRead = read(requestFifoDescriptor, &request, sizeof(Request));
        if (numRead == -1)
        {
            printf("Server failed to read request.\n");
            exit(EXIT_FAILURE);
        }

        requestHandlerInput = (Request*) malloc(sizeof(Request));
        if (requestHandlerInput == NULL)
        {
            printf("Failed to allocate memory.\n");
            exit(EXIT_FAILURE);
        }

        memcpy(requestHandlerInput, &request, sizeof(Request));

        // Request handler thread
        status = pthread_create(&requestHandlerThread, 
            NULL, stringModify, (void*)requestHandlerInput
        );
        if (status != 0)
        {
            printf("Failed to create thread.\n");
            exit(EXIT_FAILURE);
        }

        /* Detach the request handler thread */
        status = pthread_detach(requestHandlerThread);
        if (status != 0)
        {
            printf("Failed to detach thread.\n");
            exit(EXIT_FAILURE);
        }
     
    }

    exit(EXIT_SUCCESS);

}